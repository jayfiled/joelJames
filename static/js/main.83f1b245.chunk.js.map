{"version":3,"sources":["components/Menu.js","components/Nav.js","components/PortCard.js","components/SearchBox.js","components/Portfolio.js","components/Hello.js","serviceWorker.js","index.js"],"names":["Menu","props","react_default","a","createElement","id","className","onMouseDown","this","handleMouseDown","Component","Nav","visibility","menuVisibility","handleMouseDownNav","PortCard","src","alt","SearchBox","type","placeholder","Portfolio","portVisibility","components_SearchBox","components_PortCard","Hello","context","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleMenu","setState","navVisible","state","portVisible","togglePort","bind","assertThisInitialized","e","console","log","stopPropagation","components_Menu","components_Nav","components_Portfolio","Boolean","window","location","hostname","match","ReactDOM","render","components_Hello","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2WAmBeA,oMAfJC,GACH,OACIC,EAAAC,EAAAC,cAAA,UAAQC,GAAG,aAAaC,UAAU,eAAeC,YAAaC,KAAKP,MAAMQ,iBACrEP,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBACJH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACXJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,QAChBJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,QAChBJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,kBARrBI,cCsBJC,wLArBJV,GACH,IAAIW,EAAa,OAKjB,OAHIJ,KAAKP,MAAMY,iBACXD,EAAa,QAGbV,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACJE,YAAaC,KAAKP,MAAMQ,gBACxBH,UAAWM,GAEXV,EAAAC,EAAAC,cAAA,MACAG,YAAaC,KAAKP,MAAMa,oBADxB,aAGAZ,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,6BAhBEM,cCgBHK,SAhBE,WACb,OACIb,EAAAC,EAAAC,cAAA,OAAKC,GAAG,kBACJH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YAAf,OACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cAAf,6CACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cAAf,SACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAUJ,EAAAC,EAAAC,cAAA,OAAKY,IAAI,+EAA+EC,IAAI,iBAEzHf,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACXJ,EAAAC,EAAAC,cAAA,6BCEDc,eAZG,WACd,OACIhB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACXJ,EAAAC,EAAAC,cAAA,SACIe,KAAK,SACLC,YAAY,oBCebC,iLAjBJpB,GAEH,IAAIqB,EAAiB,OAKrB,OAHId,KAAKP,MAAMqB,iBACXA,EAAiB,QAGjBpB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBACRC,UAAWgB,GACPpB,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAACoB,EAAD,cAZQd,aC8ETe,cA3EX,SAAAA,EAAYxB,EAAOyB,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAApB,KAAAiB,IACxBE,EAAAC,OAAAE,EAAA,EAAAF,CAAApB,KAAAoB,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAAxB,KAAMP,EAAOyB,KAejBO,WAAa,WACTN,EAAKO,SAAS,CACVC,YAAaR,EAAKS,MAAMD,WACxBE,aAAa,KAnBOV,EAuB5BW,WAAa,WACTX,EAAKO,SAAS,CACVC,YAAY,EACZE,aAAcV,EAAKS,MAAMC,eAvB7BV,EAAKS,MAAQ,CACXD,YAAY,EACZE,aAAa,GAGfV,EAAKlB,gBAAkBkB,EAAKlB,gBAAgB8B,KAArBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACvBA,EAAKM,WAAaN,EAAKM,WAAWM,KAAhBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAElBA,EAAKb,mBAAqBa,EAAKb,mBAAmByB,KAAxBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAC1BA,EAAKW,WAAaX,EAAKW,WAAWC,KAAhBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAZMA,+EA+BZc,GACZjC,KAAKyB,aACLS,QAAQC,IAAI,oBACZF,EAAEG,6DAGaH,GACfjC,KAAK8B,aACLI,QAAQC,IAAI,qBACZF,EAAEG,mDAIN,OACQ1C,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eACJH,EAAAC,EAAAC,cAAA,yBAGJF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,cACJH,EAAAC,EAAAC,cAAA,sCAGJF,EAAAC,EAAAC,cAACyC,EAAD,CAAMpC,gBAAiBD,KAAKC,kBAC5BP,EAAAC,EAAAC,cAAC0C,EAAD,CAAKrC,gBAAiBD,KAAKC,gBACvBK,mBAAoBN,KAAKM,mBACzBD,eAAgBL,KAAK4B,MAAMD,aAC/BjC,EAAAC,EAAAC,cAAA,KAAGE,UAAU,YAAb,aAEAJ,EAAAC,EAAAC,cAAC2C,EAAD,CAAWjC,oBAAkB,EACxBQ,eAAgBd,KAAK4B,MAAMC,cAGhCnC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBACJH,EAAAC,EAAAC,cAAA,QAAMC,GAAG,gBACTH,EAAAC,EAAAC,cAAA,KAAGE,UAAU,sCApETI,aCKAsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAELpD,EAAAC,EAAAC,cAACmD,EAAD,MACAC,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.83f1b245.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../css/Menu.css'\r\n\r\nclass Menu extends Component {\r\n    render(props) {\r\n        return (\r\n            <button id=\"lineButton\" className=\"bring-up-nav\" onMouseDown={this.props.handleMouseDown} >\r\n                <div id=\"nav-container\">\r\n                    <div className=\"toggle-icon\">\r\n                        <span className=\"bar\"></span>\r\n                        <span className=\"bar\"></span>\r\n                        <span className=\"bar\"></span>\r\n                    </div>\r\n                </div>\r\n            </button> \r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;\r\n","import React, { Component } from 'react';\r\nimport '../css/Nav.css';\r\n\r\nclass Nav extends Component {\r\n    render(props) {\r\n        let visibility = 'hide';\r\n        \r\n        if (this.props.menuVisibility)\r\n            visibility = 'show';\r\n        \r\n        return (\r\n            <div id=\"flyoutMenu\" \r\n                onMouseDown={this.props.handleMouseDown}\r\n                className={visibility}>\r\n\r\n                <h1 \r\n                onMouseDown={this.props.handleMouseDownNav}>\r\n                Portfolio</h1>\r\n                <h1>About</h1>\r\n                <h1>Contact</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport '../css/PortCard.css';\r\n\r\nconst PortCard = () => {\r\n    return (\r\n        <div id=\"card-container\">\r\n            <div className=\"card-top\">\r\n                <div className=\"tut-lang\">CSS</div>\r\n                <div className=\"card-title\">HOW TO CHANGE THE DEFAULT HYPERLINK STYLE</div>\r\n                <div className=\"tut-author\">Joel </div>\r\n                <div className=\"tut-pic\"><img src=\"http://0.gravatar.com/avatar/fd93b9c0bdf8ccd4fa47f03ec2dbe29f?s=108&d=mm&r=g\" alt=\"author-pic\" /></div>\r\n            </div>\r\n            <div className=\"card-bottom\">\r\n                <p> Lorem ipsum</p>\r\n            </div>\r\n      </div>    \r\n    );\r\n};\r\n\r\nexport default PortCard;\r\n","import React from 'react';\r\nimport '../css/SearchBox.css';\r\n\r\nconst SearchBox = () => {\r\n    return (\r\n        <div className=\"search-wrap\">\r\n            <input \r\n                type=\"search\" \r\n                placeholder=\"search skill\"\r\n                // onChange{filterResults} \r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport PortCard from '../components/PortCard';\r\nimport '../css/Portfolio.css';\r\nimport SearchBox from '../components/SearchBox';\r\n\r\nclass Portfolio extends Component {\r\n    render(props) {\r\n        \r\n        let portVisibility = 'hide';\r\n\r\n        if (this.props.portVisibility)\r\n            portVisibility = 'show';\r\n        \r\n        return (\r\n            <div id=\"portfolio-page\" \r\n            className={portVisibility}>\r\n                <SearchBox />\r\n                <PortCard />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Portfolio;","import React, { Component } from 'react';\r\nimport '../css/Hello.css'\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport Menu from './Menu';\r\nimport Nav from './Nav';\r\nimport Portfolio from './Portfolio';\r\n\r\nclass Hello extends Component {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n     \r\n        this.state = {\r\n          navVisible: false,\r\n          portVisible: false\r\n        };\r\n     \r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.toggleMenu = this.toggleMenu.bind(this);\r\n\r\n        this.handleMouseDownNav = this.handleMouseDownNav.bind(this);\r\n        this.togglePort = this.togglePort.bind(this);\r\n\r\n      }\r\n\r\n    toggleMenu = () => {\r\n        this.setState({\r\n            navVisible: !this.state.navVisible,\r\n            portVisible: false\r\n        });\r\n    }\r\n\r\n    togglePort = () => {\r\n        this.setState({\r\n            navVisible: false,\r\n            portVisible: !this.state.portVisible\r\n        });\r\n    }\r\n\r\n\r\n    handleMouseDown(e) {\r\n        this.toggleMenu();\r\n        console.log('menu bar clicked')\r\n        e.stopPropagation();\r\n    }\r\n\r\n    handleMouseDownNav(e) {\r\n        this.togglePort();\r\n        console.log('portfolio clicked');\r\n        e.stopPropagation();\r\n    }\r\n        \r\nrender() {\r\n    return (\r\n            <div>\r\n\r\n            <div id=\"land-header\">\r\n                <h3>Joel James</h3>\r\n            </div>\r\n\r\n            <div id=\"land-title\">\r\n                <h1>Front End Web Developer</h1>\r\n            </div>\r\n\r\n            <Menu handleMouseDown={this.handleMouseDown} />\r\n            <Nav handleMouseDown={this.handleMouseDown}\r\n                handleMouseDownNav={this.handleMouseDownNav} \r\n                menuVisibility={this.state.navVisible} />\r\n            <p className=\"location\">Melbourne</p>\r\n\r\n            <Portfolio handleMouseDownNav  \r\n                 portVisibility={this.state.portVisible} />\r\n\r\n\r\n            <div id=\"bring-up-nav\">\r\n                <span id=\"slide-right\"></span>\r\n                <i className=\"fa fa-angle-double-right\"></i>\r\n            </div>\r\n\r\n        </div>   \r\n    );\r\n}\r\n}\r\n\r\nexport default Hello;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport Hello from './components/Hello';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n\n    <Hello/>,\n    document.getElementById('root')\n    \n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}